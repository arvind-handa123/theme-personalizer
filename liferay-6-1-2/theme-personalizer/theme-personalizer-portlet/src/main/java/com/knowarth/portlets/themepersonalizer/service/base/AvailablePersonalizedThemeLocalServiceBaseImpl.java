/**
 * Copyright (c) 2014 KNOWARTH Technologies Pvt. Ltd. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */
package com.knowarth.portlets.themepersonalizer.service.base;

import com.knowarth.portlets.themepersonalizer.model.AvailablePersonalizedTheme;
import com.knowarth.portlets.themepersonalizer.service.AvailablePersonalizedThemeLocalService;
import com.knowarth.portlets.themepersonalizer.service.UserPersonalizedThemeLocalService;
import com.knowarth.portlets.themepersonalizer.service.persistence.AvailablePersonalizedThemePersistence;
import com.knowarth.portlets.themepersonalizer.service.persistence.UserPersonalizedThemePersistence;

import com.liferay.counter.service.CounterLocalService;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.model.PersistedModel;
import com.liferay.portal.service.BaseLocalServiceImpl;
import com.liferay.portal.service.PersistedModelLocalServiceRegistryUtil;
import com.liferay.portal.service.ResourceLocalService;
import com.liferay.portal.service.ResourceService;
import com.liferay.portal.service.UserLocalService;
import com.liferay.portal.service.UserService;
import com.liferay.portal.service.persistence.ResourcePersistence;
import com.liferay.portal.service.persistence.UserPersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * The base implementation of the available personalized theme local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.knowarth.portlets.themepersonalizer.service.impl.AvailablePersonalizedThemeLocalServiceImpl}.
 * </p>
 *
 * @author Samir Bhatt
 * @see com.knowarth.portlets.themepersonalizer.service.impl.AvailablePersonalizedThemeLocalServiceImpl
 * @see com.knowarth.portlets.themepersonalizer.service.AvailablePersonalizedThemeLocalServiceUtil
 * @generated
 */
public abstract class AvailablePersonalizedThemeLocalServiceBaseImpl
    extends BaseLocalServiceImpl
    implements AvailablePersonalizedThemeLocalService, IdentifiableBean {
    @BeanReference(type = AvailablePersonalizedThemeLocalService.class)
    protected AvailablePersonalizedThemeLocalService availablePersonalizedThemeLocalService;
    @BeanReference(type = AvailablePersonalizedThemePersistence.class)
    protected AvailablePersonalizedThemePersistence availablePersonalizedThemePersistence;
    @BeanReference(type = UserPersonalizedThemeLocalService.class)
    protected UserPersonalizedThemeLocalService userPersonalizedThemeLocalService;
    @BeanReference(type = UserPersonalizedThemePersistence.class)
    protected UserPersonalizedThemePersistence userPersonalizedThemePersistence;
    @BeanReference(type = CounterLocalService.class)
    protected CounterLocalService counterLocalService;
    @BeanReference(type = ResourceLocalService.class)
    protected ResourceLocalService resourceLocalService;
    @BeanReference(type = ResourceService.class)
    protected ResourceService resourceService;
    @BeanReference(type = ResourcePersistence.class)
    protected ResourcePersistence resourcePersistence;
    @BeanReference(type = UserLocalService.class)
    protected UserLocalService userLocalService;
    @BeanReference(type = UserService.class)
    protected UserService userService;
    @BeanReference(type = UserPersistence.class)
    protected UserPersistence userPersistence;
    private String _beanIdentifier;
    private ClassLoader _classLoader;
    private AvailablePersonalizedThemeLocalServiceClpInvoker _clpInvoker = new AvailablePersonalizedThemeLocalServiceClpInvoker();

    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. Always use {@link com.knowarth.portlets.themepersonalizer.service.AvailablePersonalizedThemeLocalServiceUtil} to access the available personalized theme local service.
     */

    /**
     * Adds the available personalized theme to the database. Also notifies the appropriate model listeners.
     *
     * @param availablePersonalizedTheme the available personalized theme
     * @return the available personalized theme that was added
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.REINDEX)
    public AvailablePersonalizedTheme addAvailablePersonalizedTheme(
        AvailablePersonalizedTheme availablePersonalizedTheme)
        throws SystemException {
        availablePersonalizedTheme.setNew(true);

        return availablePersonalizedThemePersistence.update(availablePersonalizedTheme,
            false);
    }

    /**
     * Creates a new available personalized theme with the primary key. Does not add the available personalized theme to the database.
     *
     * @param id the primary key for the new available personalized theme
     * @return the new available personalized theme
     */
    public AvailablePersonalizedTheme createAvailablePersonalizedTheme(long id) {
        return availablePersonalizedThemePersistence.create(id);
    }

    /**
     * Deletes the available personalized theme with the primary key from the database. Also notifies the appropriate model listeners.
     *
     * @param id the primary key of the available personalized theme
     * @return the available personalized theme that was removed
     * @throws PortalException if a available personalized theme with the primary key could not be found
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.DELETE)
    public AvailablePersonalizedTheme deleteAvailablePersonalizedTheme(long id)
        throws PortalException, SystemException {
        return availablePersonalizedThemePersistence.remove(id);
    }

    /**
     * Deletes the available personalized theme from the database. Also notifies the appropriate model listeners.
     *
     * @param availablePersonalizedTheme the available personalized theme
     * @return the available personalized theme that was removed
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.DELETE)
    public AvailablePersonalizedTheme deleteAvailablePersonalizedTheme(
        AvailablePersonalizedTheme availablePersonalizedTheme)
        throws SystemException {
        return availablePersonalizedThemePersistence.remove(availablePersonalizedTheme);
    }

    public DynamicQuery dynamicQuery() {
        Class<?> clazz = getClass();

        return DynamicQueryFactoryUtil.forClass(AvailablePersonalizedTheme.class,
            clazz.getClassLoader());
    }

    /**
     * Performs a dynamic query on the database and returns the matching rows.
     *
     * @param dynamicQuery the dynamic query
     * @return the matching rows
     * @throws SystemException if a system exception occurred
     */
    @SuppressWarnings("rawtypes")
    public List dynamicQuery(DynamicQuery dynamicQuery)
        throws SystemException {
        return availablePersonalizedThemePersistence.findWithDynamicQuery(dynamicQuery);
    }

    /**
     * Performs a dynamic query on the database and returns a range of the matching rows.
     *
     * <p>
     * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set.
     * </p>
     *
     * @param dynamicQuery the dynamic query
     * @param start the lower bound of the range of model instances
     * @param end the upper bound of the range of model instances (not inclusive)
     * @return the range of matching rows
     * @throws SystemException if a system exception occurred
     */
    @SuppressWarnings("rawtypes")
    public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end)
        throws SystemException {
        return availablePersonalizedThemePersistence.findWithDynamicQuery(dynamicQuery,
            start, end);
    }

    /**
     * Performs a dynamic query on the database and returns an ordered range of the matching rows.
     *
     * <p>
     * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set.
     * </p>
     *
     * @param dynamicQuery the dynamic query
     * @param start the lower bound of the range of model instances
     * @param end the upper bound of the range of model instances (not inclusive)
     * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
     * @return the ordered range of matching rows
     * @throws SystemException if a system exception occurred
     */
    @SuppressWarnings("rawtypes")
    public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end,
        OrderByComparator orderByComparator) throws SystemException {
        return availablePersonalizedThemePersistence.findWithDynamicQuery(dynamicQuery,
            start, end, orderByComparator);
    }

    /**
     * Returns the number of rows that match the dynamic query.
     *
     * @param dynamicQuery the dynamic query
     * @return the number of rows that match the dynamic query
     * @throws SystemException if a system exception occurred
     */
    public long dynamicQueryCount(DynamicQuery dynamicQuery)
        throws SystemException {
        return availablePersonalizedThemePersistence.countWithDynamicQuery(dynamicQuery);
    }

    public AvailablePersonalizedTheme fetchAvailablePersonalizedTheme(long id)
        throws SystemException {
        return availablePersonalizedThemePersistence.fetchByPrimaryKey(id);
    }

    /**
     * Returns the available personalized theme with the primary key.
     *
     * @param id the primary key of the available personalized theme
     * @return the available personalized theme
     * @throws PortalException if a available personalized theme with the primary key could not be found
     * @throws SystemException if a system exception occurred
     */
    public AvailablePersonalizedTheme getAvailablePersonalizedTheme(long id)
        throws PortalException, SystemException {
        return availablePersonalizedThemePersistence.findByPrimaryKey(id);
    }

    public PersistedModel getPersistedModel(Serializable primaryKeyObj)
        throws PortalException, SystemException {
        return availablePersonalizedThemePersistence.findByPrimaryKey(primaryKeyObj);
    }

    /**
     * Returns a range of all the available personalized themes.
     *
     * <p>
     * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set.
     * </p>
     *
     * @param start the lower bound of the range of available personalized themes
     * @param end the upper bound of the range of available personalized themes (not inclusive)
     * @return the range of available personalized themes
     * @throws SystemException if a system exception occurred
     */
    public List<AvailablePersonalizedTheme> getAvailablePersonalizedThemes(
        int start, int end) throws SystemException {
        return availablePersonalizedThemePersistence.findAll(start, end);
    }

    /**
     * Returns the number of available personalized themes.
     *
     * @return the number of available personalized themes
     * @throws SystemException if a system exception occurred
     */
    public int getAvailablePersonalizedThemesCount() throws SystemException {
        return availablePersonalizedThemePersistence.countAll();
    }

    /**
     * Updates the available personalized theme in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
     *
     * @param availablePersonalizedTheme the available personalized theme
     * @return the available personalized theme that was updated
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.REINDEX)
    public AvailablePersonalizedTheme updateAvailablePersonalizedTheme(
        AvailablePersonalizedTheme availablePersonalizedTheme)
        throws SystemException {
        return updateAvailablePersonalizedTheme(availablePersonalizedTheme, true);
    }

    /**
     * Updates the available personalized theme in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
     *
     * @param availablePersonalizedTheme the available personalized theme
     * @param merge whether to merge the available personalized theme with the current session. See {@link com.liferay.portal.service.persistence.BatchSession#update(com.liferay.portal.kernel.dao.orm.Session, com.liferay.portal.model.BaseModel, boolean)} for an explanation.
     * @return the available personalized theme that was updated
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.REINDEX)
    public AvailablePersonalizedTheme updateAvailablePersonalizedTheme(
        AvailablePersonalizedTheme availablePersonalizedTheme, boolean merge)
        throws SystemException {
        availablePersonalizedTheme.setNew(false);

        return availablePersonalizedThemePersistence.update(availablePersonalizedTheme,
            merge);
    }

    /**
     * Returns the available personalized theme local service.
     *
     * @return the available personalized theme local service
     */
    public AvailablePersonalizedThemeLocalService getAvailablePersonalizedThemeLocalService() {
        return availablePersonalizedThemeLocalService;
    }

    /**
     * Sets the available personalized theme local service.
     *
     * @param availablePersonalizedThemeLocalService the available personalized theme local service
     */
    public void setAvailablePersonalizedThemeLocalService(
        AvailablePersonalizedThemeLocalService availablePersonalizedThemeLocalService) {
        this.availablePersonalizedThemeLocalService = availablePersonalizedThemeLocalService;
    }

    /**
     * Returns the available personalized theme persistence.
     *
     * @return the available personalized theme persistence
     */
    public AvailablePersonalizedThemePersistence getAvailablePersonalizedThemePersistence() {
        return availablePersonalizedThemePersistence;
    }

    /**
     * Sets the available personalized theme persistence.
     *
     * @param availablePersonalizedThemePersistence the available personalized theme persistence
     */
    public void setAvailablePersonalizedThemePersistence(
        AvailablePersonalizedThemePersistence availablePersonalizedThemePersistence) {
        this.availablePersonalizedThemePersistence = availablePersonalizedThemePersistence;
    }

    /**
     * Returns the user personalized theme local service.
     *
     * @return the user personalized theme local service
     */
    public UserPersonalizedThemeLocalService getUserPersonalizedThemeLocalService() {
        return userPersonalizedThemeLocalService;
    }

    /**
     * Sets the user personalized theme local service.
     *
     * @param userPersonalizedThemeLocalService the user personalized theme local service
     */
    public void setUserPersonalizedThemeLocalService(
        UserPersonalizedThemeLocalService userPersonalizedThemeLocalService) {
        this.userPersonalizedThemeLocalService = userPersonalizedThemeLocalService;
    }

    /**
     * Returns the user personalized theme persistence.
     *
     * @return the user personalized theme persistence
     */
    public UserPersonalizedThemePersistence getUserPersonalizedThemePersistence() {
        return userPersonalizedThemePersistence;
    }

    /**
     * Sets the user personalized theme persistence.
     *
     * @param userPersonalizedThemePersistence the user personalized theme persistence
     */
    public void setUserPersonalizedThemePersistence(
        UserPersonalizedThemePersistence userPersonalizedThemePersistence) {
        this.userPersonalizedThemePersistence = userPersonalizedThemePersistence;
    }

    /**
     * Returns the counter local service.
     *
     * @return the counter local service
     */
    public CounterLocalService getCounterLocalService() {
        return counterLocalService;
    }

    /**
     * Sets the counter local service.
     *
     * @param counterLocalService the counter local service
     */
    public void setCounterLocalService(CounterLocalService counterLocalService) {
        this.counterLocalService = counterLocalService;
    }

    /**
     * Returns the resource local service.
     *
     * @return the resource local service
     */
    public ResourceLocalService getResourceLocalService() {
        return resourceLocalService;
    }

    /**
     * Sets the resource local service.
     *
     * @param resourceLocalService the resource local service
     */
    public void setResourceLocalService(
        ResourceLocalService resourceLocalService) {
        this.resourceLocalService = resourceLocalService;
    }

    /**
     * Returns the resource remote service.
     *
     * @return the resource remote service
     */
    public ResourceService getResourceService() {
        return resourceService;
    }

    /**
     * Sets the resource remote service.
     *
     * @param resourceService the resource remote service
     */
    public void setResourceService(ResourceService resourceService) {
        this.resourceService = resourceService;
    }

    /**
     * Returns the resource persistence.
     *
     * @return the resource persistence
     */
    public ResourcePersistence getResourcePersistence() {
        return resourcePersistence;
    }

    /**
     * Sets the resource persistence.
     *
     * @param resourcePersistence the resource persistence
     */
    public void setResourcePersistence(ResourcePersistence resourcePersistence) {
        this.resourcePersistence = resourcePersistence;
    }

    /**
     * Returns the user local service.
     *
     * @return the user local service
     */
    public UserLocalService getUserLocalService() {
        return userLocalService;
    }

    /**
     * Sets the user local service.
     *
     * @param userLocalService the user local service
     */
    public void setUserLocalService(UserLocalService userLocalService) {
        this.userLocalService = userLocalService;
    }

    /**
     * Returns the user remote service.
     *
     * @return the user remote service
     */
    public UserService getUserService() {
        return userService;
    }

    /**
     * Sets the user remote service.
     *
     * @param userService the user remote service
     */
    public void setUserService(UserService userService) {
        this.userService = userService;
    }

    /**
     * Returns the user persistence.
     *
     * @return the user persistence
     */
    public UserPersistence getUserPersistence() {
        return userPersistence;
    }

    /**
     * Sets the user persistence.
     *
     * @param userPersistence the user persistence
     */
    public void setUserPersistence(UserPersistence userPersistence) {
        this.userPersistence = userPersistence;
    }

    public void afterPropertiesSet() {
        Class<?> clazz = getClass();

        _classLoader = clazz.getClassLoader();

        PersistedModelLocalServiceRegistryUtil.register("com.knowarth.portlets.themepersonalizer.model.AvailablePersonalizedTheme",
            availablePersonalizedThemeLocalService);
    }

    public void destroy() {
        PersistedModelLocalServiceRegistryUtil.unregister(
            "com.knowarth.portlets.themepersonalizer.model.AvailablePersonalizedTheme");
    }

    /**
     * Returns the Spring bean ID for this bean.
     *
     * @return the Spring bean ID for this bean
     */
    public String getBeanIdentifier() {
        return _beanIdentifier;
    }

    /**
     * Sets the Spring bean ID for this bean.
     *
     * @param beanIdentifier the Spring bean ID for this bean
     */
    public void setBeanIdentifier(String beanIdentifier) {
        _beanIdentifier = beanIdentifier;
    }

    public Object invokeMethod(String name, String[] parameterTypes,
        Object[] arguments) throws Throwable {
        Thread currentThread = Thread.currentThread();

        ClassLoader contextClassLoader = currentThread.getContextClassLoader();

        if (contextClassLoader != _classLoader) {
            currentThread.setContextClassLoader(_classLoader);
        }

        try {
            return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
        } finally {
            if (contextClassLoader != _classLoader) {
                currentThread.setContextClassLoader(contextClassLoader);
            }
        }
    }

    protected Class<?> getModelClass() {
        return AvailablePersonalizedTheme.class;
    }

    protected String getModelClassName() {
        return AvailablePersonalizedTheme.class.getName();
    }

    /**
     * Performs an SQL query.
     *
     * @param sql the sql query
     */
    protected void runSQL(String sql) throws SystemException {
        try {
            DataSource dataSource = availablePersonalizedThemePersistence.getDataSource();

            SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
                    sql, new int[0]);

            sqlUpdate.update();
        } catch (Exception e) {
            throw new SystemException(e);
        }
    }
}
