package com.knowarth.portlets.themepersonalizer.model;

import com.liferay.portal.kernel.bean.AutoEscape;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.model.BaseModel;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;

import java.io.Serializable;

/**
 * The base model interface for the UserPersonalizedTheme service. Represents a row in the &quot;KNOWARTH_UserPersonalizedTheme&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This interface and its corresponding implementation {@link com.knowarth.portlets.themepersonalizer.model.impl.UserPersonalizedThemeModelImpl} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link com.knowarth.portlets.themepersonalizer.model.impl.UserPersonalizedThemeImpl}.
 * </p>
 *
 * @author Samir Bhatt
 * @see UserPersonalizedTheme
 * @see com.knowarth.portlets.themepersonalizer.model.impl.UserPersonalizedThemeImpl
 * @see com.knowarth.portlets.themepersonalizer.model.impl.UserPersonalizedThemeModelImpl
 * @generated
 */
public interface UserPersonalizedThemeModel extends BaseModel<UserPersonalizedTheme> {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this interface directly. All methods that expect a user personalized theme model instance should use the {@link UserPersonalizedTheme} interface instead.
     */

    /**
     * Returns the primary key of this user personalized theme.
     *
     * @return the primary key of this user personalized theme
     */
    public long getPrimaryKey();

    /**
     * Sets the primary key of this user personalized theme.
     *
     * @param primaryKey the primary key of this user personalized theme
     */
    public void setPrimaryKey(long primaryKey);

    /**
     * Returns the ID of this user personalized theme.
     *
     * @return the ID of this user personalized theme
     */
    public long getId();

    /**
     * Sets the ID of this user personalized theme.
     *
     * @param id the ID of this user personalized theme
     */
    public void setId(long id);

    /**
     * Returns the user ID of this user personalized theme.
     *
     * @return the user ID of this user personalized theme
     */
    public long getUserId();

    /**
     * Sets the user ID of this user personalized theme.
     *
     * @param userId the user ID of this user personalized theme
     */
    public void setUserId(long userId);

    /**
     * Returns the user uuid of this user personalized theme.
     *
     * @return the user uuid of this user personalized theme
     * @throws SystemException if a system exception occurred
     */
    public String getUserUuid() throws SystemException;

    /**
     * Sets the user uuid of this user personalized theme.
     *
     * @param userUuid the user uuid of this user personalized theme
     */
    public void setUserUuid(String userUuid);

    /**
     * Returns the layout ID of this user personalized theme.
     *
     * @return the layout ID of this user personalized theme
     */
    public long getLayoutId();

    /**
     * Sets the layout ID of this user personalized theme.
     *
     * @param layoutId the layout ID of this user personalized theme
     */
    public void setLayoutId(long layoutId);

    /**
     * Returns the theme ID of this user personalized theme.
     *
     * @return the theme ID of this user personalized theme
     */
    @AutoEscape
    public String getThemeId();

    /**
     * Sets the theme ID of this user personalized theme.
     *
     * @param themeId the theme ID of this user personalized theme
     */
    public void setThemeId(String themeId);

    /**
     * Returns the color scheme ID of this user personalized theme.
     *
     * @return the color scheme ID of this user personalized theme
     */
    @AutoEscape
    public String getColorSchemeId();

    /**
     * Sets the color scheme ID of this user personalized theme.
     *
     * @param colorSchemeId the color scheme ID of this user personalized theme
     */
    public void setColorSchemeId(String colorSchemeId);

    /**
     * Returns the apply for all pages of this user personalized theme.
     *
     * @return the apply for all pages of this user personalized theme
     */
    public boolean getApplyForAllPages();

    /**
     * Returns <code>true</code> if this user personalized theme is apply for all pages.
     *
     * @return <code>true</code> if this user personalized theme is apply for all pages; <code>false</code> otherwise
     */
    public boolean isApplyForAllPages();

    /**
     * Sets whether this user personalized theme is apply for all pages.
     *
     * @param applyForAllPages the apply for all pages of this user personalized theme
     */
    public void setApplyForAllPages(boolean applyForAllPages);

    @Override
    public boolean isNew();

    @Override
    public void setNew(boolean n);

    @Override
    public boolean isCachedModel();

    @Override
    public void setCachedModel(boolean cachedModel);

    @Override
    public boolean isEscapedModel();

    @Override
    public Serializable getPrimaryKeyObj();

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj);

    @Override
    public ExpandoBridge getExpandoBridge();

    @Override
    public void setExpandoBridgeAttributes(BaseModel<?> baseModel);

    @Override
    public void setExpandoBridgeAttributes(ExpandoBridge expandoBridge);

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext);

    @Override
    public Object clone();

    @Override
    public int compareTo(UserPersonalizedTheme userPersonalizedTheme);

    @Override
    public int hashCode();

    @Override
    public CacheModel<UserPersonalizedTheme> toCacheModel();

    @Override
    public UserPersonalizedTheme toEscapedModel();

    @Override
    public UserPersonalizedTheme toUnescapedModel();

    @Override
    public String toString();

    @Override
    public String toXmlString();
}
