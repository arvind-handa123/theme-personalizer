package com.knowarth.portlets.themepersonalizer.model.impl;

import com.knowarth.portlets.themepersonalizer.model.UserPersonalizedTheme;
import com.knowarth.portlets.themepersonalizer.model.UserPersonalizedThemeModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the UserPersonalizedTheme service. Represents a row in the &quot;KNOWARTH_UserPersonalizedTheme&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.knowarth.portlets.themepersonalizer.model.UserPersonalizedThemeModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link UserPersonalizedThemeImpl}.
 * </p>
 *
 * @author Samir Bhatt
 * @see UserPersonalizedThemeImpl
 * @see com.knowarth.portlets.themepersonalizer.model.UserPersonalizedTheme
 * @see com.knowarth.portlets.themepersonalizer.model.UserPersonalizedThemeModel
 * @generated
 */
public class UserPersonalizedThemeModelImpl extends BaseModelImpl<UserPersonalizedTheme>
    implements UserPersonalizedThemeModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a user personalized theme model instance should use the {@link com.knowarth.portlets.themepersonalizer.model.UserPersonalizedTheme} interface instead.
     */
    public static final String TABLE_NAME = "KNOWARTH_UserPersonalizedTheme";
    public static final Object[][] TABLE_COLUMNS = {
            { "id_", Types.BIGINT },
            { "userId", Types.BIGINT },
            { "layoutId", Types.BIGINT },
            { "themeId", Types.VARCHAR },
            { "colorSchemeId", Types.VARCHAR },
            { "applyForAllPages", Types.BOOLEAN }
        };
    public static final String TABLE_SQL_CREATE = "create table KNOWARTH_UserPersonalizedTheme (id_ LONG not null primary key,userId LONG,layoutId LONG,themeId VARCHAR(75) null,colorSchemeId VARCHAR(75) null,applyForAllPages BOOLEAN)";
    public static final String TABLE_SQL_DROP = "drop table KNOWARTH_UserPersonalizedTheme";
    public static final String ORDER_BY_JPQL = " ORDER BY userPersonalizedTheme.id ASC";
    public static final String ORDER_BY_SQL = " ORDER BY KNOWARTH_UserPersonalizedTheme.id_ ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.knowarth.portlets.themepersonalizer.model.UserPersonalizedTheme"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.knowarth.portlets.themepersonalizer.model.UserPersonalizedTheme"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.com.knowarth.portlets.themepersonalizer.model.UserPersonalizedTheme"),
            true);
    public static long APPLYFORALLPAGES_COLUMN_BITMASK = 1L;
    public static long LAYOUTID_COLUMN_BITMASK = 2L;
    public static long THEMEID_COLUMN_BITMASK = 4L;
    public static long USERID_COLUMN_BITMASK = 8L;
    public static long ID_COLUMN_BITMASK = 16L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.knowarth.portlets.themepersonalizer.model.UserPersonalizedTheme"));
    private static ClassLoader _classLoader = UserPersonalizedTheme.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            UserPersonalizedTheme.class
        };
    private long _id;
    private long _userId;
    private String _userUuid;
    private long _originalUserId;
    private boolean _setOriginalUserId;
    private long _layoutId;
    private long _originalLayoutId;
    private boolean _setOriginalLayoutId;
    private String _themeId;
    private String _originalThemeId;
    private String _colorSchemeId;
    private boolean _applyForAllPages;
    private boolean _originalApplyForAllPages;
    private boolean _setOriginalApplyForAllPages;
    private long _columnBitmask;
    private UserPersonalizedTheme _escapedModel;

    public UserPersonalizedThemeModelImpl() {
    }

    @Override
    public long getPrimaryKey() {
        return _id;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _id;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return UserPersonalizedTheme.class;
    }

    @Override
    public String getModelClassName() {
        return UserPersonalizedTheme.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("id", getId());
        attributes.put("userId", getUserId());
        attributes.put("layoutId", getLayoutId());
        attributes.put("themeId", getThemeId());
        attributes.put("colorSchemeId", getColorSchemeId());
        attributes.put("applyForAllPages", getApplyForAllPages());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long id = (Long) attributes.get("id");

        if (id != null) {
            setId(id);
        }

        Long userId = (Long) attributes.get("userId");

        if (userId != null) {
            setUserId(userId);
        }

        Long layoutId = (Long) attributes.get("layoutId");

        if (layoutId != null) {
            setLayoutId(layoutId);
        }

        String themeId = (String) attributes.get("themeId");

        if (themeId != null) {
            setThemeId(themeId);
        }

        String colorSchemeId = (String) attributes.get("colorSchemeId");

        if (colorSchemeId != null) {
            setColorSchemeId(colorSchemeId);
        }

        Boolean applyForAllPages = (Boolean) attributes.get("applyForAllPages");

        if (applyForAllPages != null) {
            setApplyForAllPages(applyForAllPages);
        }
    }

    @Override
    public long getId() {
        return _id;
    }

    @Override
    public void setId(long id) {
        _id = id;
    }

    @Override
    public long getUserId() {
        return _userId;
    }

    @Override
    public void setUserId(long userId) {
        _columnBitmask |= USERID_COLUMN_BITMASK;

        if (!_setOriginalUserId) {
            _setOriginalUserId = true;

            _originalUserId = _userId;
        }

        _userId = userId;
    }

    @Override
    public String getUserUuid() throws SystemException {
        return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
    }

    @Override
    public void setUserUuid(String userUuid) {
        _userUuid = userUuid;
    }

    public long getOriginalUserId() {
        return _originalUserId;
    }

    @Override
    public long getLayoutId() {
        return _layoutId;
    }

    @Override
    public void setLayoutId(long layoutId) {
        _columnBitmask |= LAYOUTID_COLUMN_BITMASK;

        if (!_setOriginalLayoutId) {
            _setOriginalLayoutId = true;

            _originalLayoutId = _layoutId;
        }

        _layoutId = layoutId;
    }

    public long getOriginalLayoutId() {
        return _originalLayoutId;
    }

    @Override
    public String getThemeId() {
        if (_themeId == null) {
            return StringPool.BLANK;
        } else {
            return _themeId;
        }
    }

    @Override
    public void setThemeId(String themeId) {
        _columnBitmask |= THEMEID_COLUMN_BITMASK;

        if (_originalThemeId == null) {
            _originalThemeId = _themeId;
        }

        _themeId = themeId;
    }

    public String getOriginalThemeId() {
        return GetterUtil.getString(_originalThemeId);
    }

    @Override
    public String getColorSchemeId() {
        if (_colorSchemeId == null) {
            return StringPool.BLANK;
        } else {
            return _colorSchemeId;
        }
    }

    @Override
    public void setColorSchemeId(String colorSchemeId) {
        _colorSchemeId = colorSchemeId;
    }

    @Override
    public boolean getApplyForAllPages() {
        return _applyForAllPages;
    }

    @Override
    public boolean isApplyForAllPages() {
        return _applyForAllPages;
    }

    @Override
    public void setApplyForAllPages(boolean applyForAllPages) {
        _columnBitmask |= APPLYFORALLPAGES_COLUMN_BITMASK;

        if (!_setOriginalApplyForAllPages) {
            _setOriginalApplyForAllPages = true;

            _originalApplyForAllPages = _applyForAllPages;
        }

        _applyForAllPages = applyForAllPages;
    }

    public boolean getOriginalApplyForAllPages() {
        return _originalApplyForAllPages;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
            UserPersonalizedTheme.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public UserPersonalizedTheme toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (UserPersonalizedTheme) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        UserPersonalizedThemeImpl userPersonalizedThemeImpl = new UserPersonalizedThemeImpl();

        userPersonalizedThemeImpl.setId(getId());
        userPersonalizedThemeImpl.setUserId(getUserId());
        userPersonalizedThemeImpl.setLayoutId(getLayoutId());
        userPersonalizedThemeImpl.setThemeId(getThemeId());
        userPersonalizedThemeImpl.setColorSchemeId(getColorSchemeId());
        userPersonalizedThemeImpl.setApplyForAllPages(getApplyForAllPages());

        userPersonalizedThemeImpl.resetOriginalValues();

        return userPersonalizedThemeImpl;
    }

    @Override
    public int compareTo(UserPersonalizedTheme userPersonalizedTheme) {
        long primaryKey = userPersonalizedTheme.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof UserPersonalizedTheme)) {
            return false;
        }

        UserPersonalizedTheme userPersonalizedTheme = (UserPersonalizedTheme) obj;

        long primaryKey = userPersonalizedTheme.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        UserPersonalizedThemeModelImpl userPersonalizedThemeModelImpl = this;

        userPersonalizedThemeModelImpl._originalUserId = userPersonalizedThemeModelImpl._userId;

        userPersonalizedThemeModelImpl._setOriginalUserId = false;

        userPersonalizedThemeModelImpl._originalLayoutId = userPersonalizedThemeModelImpl._layoutId;

        userPersonalizedThemeModelImpl._setOriginalLayoutId = false;

        userPersonalizedThemeModelImpl._originalThemeId = userPersonalizedThemeModelImpl._themeId;

        userPersonalizedThemeModelImpl._originalApplyForAllPages = userPersonalizedThemeModelImpl._applyForAllPages;

        userPersonalizedThemeModelImpl._setOriginalApplyForAllPages = false;

        userPersonalizedThemeModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<UserPersonalizedTheme> toCacheModel() {
        UserPersonalizedThemeCacheModel userPersonalizedThemeCacheModel = new UserPersonalizedThemeCacheModel();

        userPersonalizedThemeCacheModel.id = getId();

        userPersonalizedThemeCacheModel.userId = getUserId();

        userPersonalizedThemeCacheModel.layoutId = getLayoutId();

        userPersonalizedThemeCacheModel.themeId = getThemeId();

        String themeId = userPersonalizedThemeCacheModel.themeId;

        if ((themeId != null) && (themeId.length() == 0)) {
            userPersonalizedThemeCacheModel.themeId = null;
        }

        userPersonalizedThemeCacheModel.colorSchemeId = getColorSchemeId();

        String colorSchemeId = userPersonalizedThemeCacheModel.colorSchemeId;

        if ((colorSchemeId != null) && (colorSchemeId.length() == 0)) {
            userPersonalizedThemeCacheModel.colorSchemeId = null;
        }

        userPersonalizedThemeCacheModel.applyForAllPages = getApplyForAllPages();

        return userPersonalizedThemeCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(13);

        sb.append("{id=");
        sb.append(getId());
        sb.append(", userId=");
        sb.append(getUserId());
        sb.append(", layoutId=");
        sb.append(getLayoutId());
        sb.append(", themeId=");
        sb.append(getThemeId());
        sb.append(", colorSchemeId=");
        sb.append(getColorSchemeId());
        sb.append(", applyForAllPages=");
        sb.append(getApplyForAllPages());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(22);

        sb.append("<model><model-name>");
        sb.append(
            "com.knowarth.portlets.themepersonalizer.model.UserPersonalizedTheme");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>id</column-name><column-value><![CDATA[");
        sb.append(getId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>userId</column-name><column-value><![CDATA[");
        sb.append(getUserId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>layoutId</column-name><column-value><![CDATA[");
        sb.append(getLayoutId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>themeId</column-name><column-value><![CDATA[");
        sb.append(getThemeId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>colorSchemeId</column-name><column-value><![CDATA[");
        sb.append(getColorSchemeId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>applyForAllPages</column-name><column-value><![CDATA[");
        sb.append(getApplyForAllPages());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
