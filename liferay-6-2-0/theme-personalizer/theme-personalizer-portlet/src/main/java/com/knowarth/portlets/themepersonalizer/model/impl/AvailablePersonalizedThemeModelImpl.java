package com.knowarth.portlets.themepersonalizer.model.impl;

import com.knowarth.portlets.themepersonalizer.model.AvailablePersonalizedTheme;
import com.knowarth.portlets.themepersonalizer.model.AvailablePersonalizedThemeModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the AvailablePersonalizedTheme service. Represents a row in the &quot;KNOWARTH_AvailablePersonalizedTheme&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.knowarth.portlets.themepersonalizer.model.AvailablePersonalizedThemeModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link AvailablePersonalizedThemeImpl}.
 * </p>
 *
 * @author Samir Bhatt
 * @see AvailablePersonalizedThemeImpl
 * @see com.knowarth.portlets.themepersonalizer.model.AvailablePersonalizedTheme
 * @see com.knowarth.portlets.themepersonalizer.model.AvailablePersonalizedThemeModel
 * @generated
 */
public class AvailablePersonalizedThemeModelImpl extends BaseModelImpl<AvailablePersonalizedTheme>
    implements AvailablePersonalizedThemeModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a available personalized theme model instance should use the {@link com.knowarth.portlets.themepersonalizer.model.AvailablePersonalizedTheme} interface instead.
     */
    public static final String TABLE_NAME = "KNOWARTH_AvailablePersonalizedTheme";
    public static final Object[][] TABLE_COLUMNS = {
            { "id_", Types.BIGINT },
            { "companyId", Types.BIGINT },
            { "themeId", Types.VARCHAR }
        };
    public static final String TABLE_SQL_CREATE = "create table KNOWARTH_AvailablePersonalizedTheme (id_ LONG not null primary key,companyId LONG,themeId VARCHAR(75) null)";
    public static final String TABLE_SQL_DROP = "drop table KNOWARTH_AvailablePersonalizedTheme";
    public static final String ORDER_BY_JPQL = " ORDER BY availablePersonalizedTheme.id ASC";
    public static final String ORDER_BY_SQL = " ORDER BY KNOWARTH_AvailablePersonalizedTheme.id_ ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.knowarth.portlets.themepersonalizer.model.AvailablePersonalizedTheme"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.knowarth.portlets.themepersonalizer.model.AvailablePersonalizedTheme"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.com.knowarth.portlets.themepersonalizer.model.AvailablePersonalizedTheme"),
            true);
    public static long COMPANYID_COLUMN_BITMASK = 1L;
    public static long THEMEID_COLUMN_BITMASK = 2L;
    public static long ID_COLUMN_BITMASK = 4L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.knowarth.portlets.themepersonalizer.model.AvailablePersonalizedTheme"));
    private static ClassLoader _classLoader = AvailablePersonalizedTheme.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            AvailablePersonalizedTheme.class
        };
    private long _id;
    private long _companyId;
    private long _originalCompanyId;
    private boolean _setOriginalCompanyId;
    private String _themeId;
    private String _originalThemeId;
    private long _columnBitmask;
    private AvailablePersonalizedTheme _escapedModel;

    public AvailablePersonalizedThemeModelImpl() {
    }

    @Override
    public long getPrimaryKey() {
        return _id;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _id;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return AvailablePersonalizedTheme.class;
    }

    @Override
    public String getModelClassName() {
        return AvailablePersonalizedTheme.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("id", getId());
        attributes.put("companyId", getCompanyId());
        attributes.put("themeId", getThemeId());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long id = (Long) attributes.get("id");

        if (id != null) {
            setId(id);
        }

        Long companyId = (Long) attributes.get("companyId");

        if (companyId != null) {
            setCompanyId(companyId);
        }

        String themeId = (String) attributes.get("themeId");

        if (themeId != null) {
            setThemeId(themeId);
        }
    }

    @Override
    public long getId() {
        return _id;
    }

    @Override
    public void setId(long id) {
        _id = id;
    }

    @Override
    public long getCompanyId() {
        return _companyId;
    }

    @Override
    public void setCompanyId(long companyId) {
        _columnBitmask |= COMPANYID_COLUMN_BITMASK;

        if (!_setOriginalCompanyId) {
            _setOriginalCompanyId = true;

            _originalCompanyId = _companyId;
        }

        _companyId = companyId;
    }

    public long getOriginalCompanyId() {
        return _originalCompanyId;
    }

    @Override
    public String getThemeId() {
        if (_themeId == null) {
            return StringPool.BLANK;
        } else {
            return _themeId;
        }
    }

    @Override
    public void setThemeId(String themeId) {
        _columnBitmask |= THEMEID_COLUMN_BITMASK;

        if (_originalThemeId == null) {
            _originalThemeId = _themeId;
        }

        _themeId = themeId;
    }

    public String getOriginalThemeId() {
        return GetterUtil.getString(_originalThemeId);
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
            AvailablePersonalizedTheme.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public AvailablePersonalizedTheme toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (AvailablePersonalizedTheme) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        AvailablePersonalizedThemeImpl availablePersonalizedThemeImpl = new AvailablePersonalizedThemeImpl();

        availablePersonalizedThemeImpl.setId(getId());
        availablePersonalizedThemeImpl.setCompanyId(getCompanyId());
        availablePersonalizedThemeImpl.setThemeId(getThemeId());

        availablePersonalizedThemeImpl.resetOriginalValues();

        return availablePersonalizedThemeImpl;
    }

    @Override
    public int compareTo(AvailablePersonalizedTheme availablePersonalizedTheme) {
        long primaryKey = availablePersonalizedTheme.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof AvailablePersonalizedTheme)) {
            return false;
        }

        AvailablePersonalizedTheme availablePersonalizedTheme = (AvailablePersonalizedTheme) obj;

        long primaryKey = availablePersonalizedTheme.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        AvailablePersonalizedThemeModelImpl availablePersonalizedThemeModelImpl = this;

        availablePersonalizedThemeModelImpl._originalCompanyId = availablePersonalizedThemeModelImpl._companyId;

        availablePersonalizedThemeModelImpl._setOriginalCompanyId = false;

        availablePersonalizedThemeModelImpl._originalThemeId = availablePersonalizedThemeModelImpl._themeId;

        availablePersonalizedThemeModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<AvailablePersonalizedTheme> toCacheModel() {
        AvailablePersonalizedThemeCacheModel availablePersonalizedThemeCacheModel =
            new AvailablePersonalizedThemeCacheModel();

        availablePersonalizedThemeCacheModel.id = getId();

        availablePersonalizedThemeCacheModel.companyId = getCompanyId();

        availablePersonalizedThemeCacheModel.themeId = getThemeId();

        String themeId = availablePersonalizedThemeCacheModel.themeId;

        if ((themeId != null) && (themeId.length() == 0)) {
            availablePersonalizedThemeCacheModel.themeId = null;
        }

        return availablePersonalizedThemeCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(7);

        sb.append("{id=");
        sb.append(getId());
        sb.append(", companyId=");
        sb.append(getCompanyId());
        sb.append(", themeId=");
        sb.append(getThemeId());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(13);

        sb.append("<model><model-name>");
        sb.append(
            "com.knowarth.portlets.themepersonalizer.model.AvailablePersonalizedTheme");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>id</column-name><column-value><![CDATA[");
        sb.append(getId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>companyId</column-name><column-value><![CDATA[");
        sb.append(getCompanyId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>themeId</column-name><column-value><![CDATA[");
        sb.append(getThemeId());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
