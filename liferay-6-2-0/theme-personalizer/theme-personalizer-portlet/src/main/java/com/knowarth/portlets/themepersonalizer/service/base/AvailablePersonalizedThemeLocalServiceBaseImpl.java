package com.knowarth.portlets.themepersonalizer.service.base;

import com.knowarth.portlets.themepersonalizer.model.AvailablePersonalizedTheme;
import com.knowarth.portlets.themepersonalizer.service.AvailablePersonalizedThemeLocalService;
import com.knowarth.portlets.themepersonalizer.service.persistence.AvailablePersonalizedThemePersistence;
import com.knowarth.portlets.themepersonalizer.service.persistence.UserPersonalizedThemePersistence;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.model.PersistedModel;
import com.liferay.portal.service.BaseLocalServiceImpl;
import com.liferay.portal.service.PersistedModelLocalServiceRegistryUtil;
import com.liferay.portal.service.persistence.UserPersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the available personalized theme local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.knowarth.portlets.themepersonalizer.service.impl.AvailablePersonalizedThemeLocalServiceImpl}.
 * </p>
 *
 * @author Samir Bhatt
 * @see com.knowarth.portlets.themepersonalizer.service.impl.AvailablePersonalizedThemeLocalServiceImpl
 * @see com.knowarth.portlets.themepersonalizer.service.AvailablePersonalizedThemeLocalServiceUtil
 * @generated
 */
public abstract class AvailablePersonalizedThemeLocalServiceBaseImpl
    extends BaseLocalServiceImpl
    implements AvailablePersonalizedThemeLocalService, IdentifiableBean {
    @BeanReference(type = com.knowarth.portlets.themepersonalizer.service.AvailablePersonalizedThemeLocalService.class)
    protected com.knowarth.portlets.themepersonalizer.service.AvailablePersonalizedThemeLocalService availablePersonalizedThemeLocalService;
    @BeanReference(type = AvailablePersonalizedThemePersistence.class)
    protected AvailablePersonalizedThemePersistence availablePersonalizedThemePersistence;
    @BeanReference(type = com.knowarth.portlets.themepersonalizer.service.UserPersonalizedThemeLocalService.class)
    protected com.knowarth.portlets.themepersonalizer.service.UserPersonalizedThemeLocalService userPersonalizedThemeLocalService;
    @BeanReference(type = UserPersonalizedThemePersistence.class)
    protected UserPersonalizedThemePersistence userPersonalizedThemePersistence;
    @BeanReference(type = com.liferay.counter.service.CounterLocalService.class)
    protected com.liferay.counter.service.CounterLocalService counterLocalService;
    @BeanReference(type = com.liferay.portal.service.ResourceLocalService.class)
    protected com.liferay.portal.service.ResourceLocalService resourceLocalService;
    @BeanReference(type = com.liferay.portal.service.UserLocalService.class)
    protected com.liferay.portal.service.UserLocalService userLocalService;
    @BeanReference(type = com.liferay.portal.service.UserService.class)
    protected com.liferay.portal.service.UserService userService;
    @BeanReference(type = UserPersistence.class)
    protected UserPersistence userPersistence;
    private String _beanIdentifier;
    private ClassLoader _classLoader;
    private AvailablePersonalizedThemeLocalServiceClpInvoker _clpInvoker = new AvailablePersonalizedThemeLocalServiceClpInvoker();

    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. Always use {@link com.knowarth.portlets.themepersonalizer.service.AvailablePersonalizedThemeLocalServiceUtil} to access the available personalized theme local service.
     */

    /**
     * Adds the available personalized theme to the database. Also notifies the appropriate model listeners.
     *
     * @param availablePersonalizedTheme the available personalized theme
     * @return the available personalized theme that was added
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.REINDEX)
    @Override
    public AvailablePersonalizedTheme addAvailablePersonalizedTheme(
        AvailablePersonalizedTheme availablePersonalizedTheme)
        throws SystemException {
        availablePersonalizedTheme.setNew(true);

        return availablePersonalizedThemePersistence.update(availablePersonalizedTheme);
    }

    /**
     * Creates a new available personalized theme with the primary key. Does not add the available personalized theme to the database.
     *
     * @param id the primary key for the new available personalized theme
     * @return the new available personalized theme
     */
    @Override
    public AvailablePersonalizedTheme createAvailablePersonalizedTheme(long id) {
        return availablePersonalizedThemePersistence.create(id);
    }

    /**
     * Deletes the available personalized theme with the primary key from the database. Also notifies the appropriate model listeners.
     *
     * @param id the primary key of the available personalized theme
     * @return the available personalized theme that was removed
     * @throws PortalException if a available personalized theme with the primary key could not be found
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.DELETE)
    @Override
    public AvailablePersonalizedTheme deleteAvailablePersonalizedTheme(long id)
        throws PortalException, SystemException {
        return availablePersonalizedThemePersistence.remove(id);
    }

    /**
     * Deletes the available personalized theme from the database. Also notifies the appropriate model listeners.
     *
     * @param availablePersonalizedTheme the available personalized theme
     * @return the available personalized theme that was removed
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.DELETE)
    @Override
    public AvailablePersonalizedTheme deleteAvailablePersonalizedTheme(
        AvailablePersonalizedTheme availablePersonalizedTheme)
        throws SystemException {
        return availablePersonalizedThemePersistence.remove(availablePersonalizedTheme);
    }

    @Override
    public DynamicQuery dynamicQuery() {
        Class<?> clazz = getClass();

        return DynamicQueryFactoryUtil.forClass(AvailablePersonalizedTheme.class,
            clazz.getClassLoader());
    }

    /**
     * Performs a dynamic query on the database and returns the matching rows.
     *
     * @param dynamicQuery the dynamic query
     * @return the matching rows
     * @throws SystemException if a system exception occurred
     */
    @Override
    @SuppressWarnings("rawtypes")
    public List dynamicQuery(DynamicQuery dynamicQuery)
        throws SystemException {
        return availablePersonalizedThemePersistence.findWithDynamicQuery(dynamicQuery);
    }

    /**
     * Performs a dynamic query on the database and returns a range of the matching rows.
     *
     * <p>
     * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.knowarth.portlets.themepersonalizer.model.impl.AvailablePersonalizedThemeModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
     * </p>
     *
     * @param dynamicQuery the dynamic query
     * @param start the lower bound of the range of model instances
     * @param end the upper bound of the range of model instances (not inclusive)
     * @return the range of matching rows
     * @throws SystemException if a system exception occurred
     */
    @Override
    @SuppressWarnings("rawtypes")
    public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end)
        throws SystemException {
        return availablePersonalizedThemePersistence.findWithDynamicQuery(dynamicQuery,
            start, end);
    }

    /**
     * Performs a dynamic query on the database and returns an ordered range of the matching rows.
     *
     * <p>
     * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.knowarth.portlets.themepersonalizer.model.impl.AvailablePersonalizedThemeModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
     * </p>
     *
     * @param dynamicQuery the dynamic query
     * @param start the lower bound of the range of model instances
     * @param end the upper bound of the range of model instances (not inclusive)
     * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
     * @return the ordered range of matching rows
     * @throws SystemException if a system exception occurred
     */
    @Override
    @SuppressWarnings("rawtypes")
    public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end,
        OrderByComparator orderByComparator) throws SystemException {
        return availablePersonalizedThemePersistence.findWithDynamicQuery(dynamicQuery,
            start, end, orderByComparator);
    }

    /**
     * Returns the number of rows that match the dynamic query.
     *
     * @param dynamicQuery the dynamic query
     * @return the number of rows that match the dynamic query
     * @throws SystemException if a system exception occurred
     */
    @Override
    public long dynamicQueryCount(DynamicQuery dynamicQuery)
        throws SystemException {
        return availablePersonalizedThemePersistence.countWithDynamicQuery(dynamicQuery);
    }

    /**
     * Returns the number of rows that match the dynamic query.
     *
     * @param dynamicQuery the dynamic query
     * @param projection the projection to apply to the query
     * @return the number of rows that match the dynamic query
     * @throws SystemException if a system exception occurred
     */
    @Override
    public long dynamicQueryCount(DynamicQuery dynamicQuery,
        Projection projection) throws SystemException {
        return availablePersonalizedThemePersistence.countWithDynamicQuery(dynamicQuery,
            projection);
    }

    @Override
    public AvailablePersonalizedTheme fetchAvailablePersonalizedTheme(long id)
        throws SystemException {
        return availablePersonalizedThemePersistence.fetchByPrimaryKey(id);
    }

    /**
     * Returns the available personalized theme with the primary key.
     *
     * @param id the primary key of the available personalized theme
     * @return the available personalized theme
     * @throws PortalException if a available personalized theme with the primary key could not be found
     * @throws SystemException if a system exception occurred
     */
    @Override
    public AvailablePersonalizedTheme getAvailablePersonalizedTheme(long id)
        throws PortalException, SystemException {
        return availablePersonalizedThemePersistence.findByPrimaryKey(id);
    }

    @Override
    public PersistedModel getPersistedModel(Serializable primaryKeyObj)
        throws PortalException, SystemException {
        return availablePersonalizedThemePersistence.findByPrimaryKey(primaryKeyObj);
    }

    /**
     * Returns a range of all the available personalized themes.
     *
     * <p>
     * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.knowarth.portlets.themepersonalizer.model.impl.AvailablePersonalizedThemeModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
     * </p>
     *
     * @param start the lower bound of the range of available personalized themes
     * @param end the upper bound of the range of available personalized themes (not inclusive)
     * @return the range of available personalized themes
     * @throws SystemException if a system exception occurred
     */
    @Override
    public List<AvailablePersonalizedTheme> getAvailablePersonalizedThemes(
        int start, int end) throws SystemException {
        return availablePersonalizedThemePersistence.findAll(start, end);
    }

    /**
     * Returns the number of available personalized themes.
     *
     * @return the number of available personalized themes
     * @throws SystemException if a system exception occurred
     */
    @Override
    public int getAvailablePersonalizedThemesCount() throws SystemException {
        return availablePersonalizedThemePersistence.countAll();
    }

    /**
     * Updates the available personalized theme in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
     *
     * @param availablePersonalizedTheme the available personalized theme
     * @return the available personalized theme that was updated
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.REINDEX)
    @Override
    public AvailablePersonalizedTheme updateAvailablePersonalizedTheme(
        AvailablePersonalizedTheme availablePersonalizedTheme)
        throws SystemException {
        return availablePersonalizedThemePersistence.update(availablePersonalizedTheme);
    }

    /**
     * Returns the available personalized theme local service.
     *
     * @return the available personalized theme local service
     */
    public com.knowarth.portlets.themepersonalizer.service.AvailablePersonalizedThemeLocalService getAvailablePersonalizedThemeLocalService() {
        return availablePersonalizedThemeLocalService;
    }

    /**
     * Sets the available personalized theme local service.
     *
     * @param availablePersonalizedThemeLocalService the available personalized theme local service
     */
    public void setAvailablePersonalizedThemeLocalService(
        com.knowarth.portlets.themepersonalizer.service.AvailablePersonalizedThemeLocalService availablePersonalizedThemeLocalService) {
        this.availablePersonalizedThemeLocalService = availablePersonalizedThemeLocalService;
    }

    /**
     * Returns the available personalized theme persistence.
     *
     * @return the available personalized theme persistence
     */
    public AvailablePersonalizedThemePersistence getAvailablePersonalizedThemePersistence() {
        return availablePersonalizedThemePersistence;
    }

    /**
     * Sets the available personalized theme persistence.
     *
     * @param availablePersonalizedThemePersistence the available personalized theme persistence
     */
    public void setAvailablePersonalizedThemePersistence(
        AvailablePersonalizedThemePersistence availablePersonalizedThemePersistence) {
        this.availablePersonalizedThemePersistence = availablePersonalizedThemePersistence;
    }

    /**
     * Returns the user personalized theme local service.
     *
     * @return the user personalized theme local service
     */
    public com.knowarth.portlets.themepersonalizer.service.UserPersonalizedThemeLocalService getUserPersonalizedThemeLocalService() {
        return userPersonalizedThemeLocalService;
    }

    /**
     * Sets the user personalized theme local service.
     *
     * @param userPersonalizedThemeLocalService the user personalized theme local service
     */
    public void setUserPersonalizedThemeLocalService(
        com.knowarth.portlets.themepersonalizer.service.UserPersonalizedThemeLocalService userPersonalizedThemeLocalService) {
        this.userPersonalizedThemeLocalService = userPersonalizedThemeLocalService;
    }

    /**
     * Returns the user personalized theme persistence.
     *
     * @return the user personalized theme persistence
     */
    public UserPersonalizedThemePersistence getUserPersonalizedThemePersistence() {
        return userPersonalizedThemePersistence;
    }

    /**
     * Sets the user personalized theme persistence.
     *
     * @param userPersonalizedThemePersistence the user personalized theme persistence
     */
    public void setUserPersonalizedThemePersistence(
        UserPersonalizedThemePersistence userPersonalizedThemePersistence) {
        this.userPersonalizedThemePersistence = userPersonalizedThemePersistence;
    }

    /**
     * Returns the counter local service.
     *
     * @return the counter local service
     */
    public com.liferay.counter.service.CounterLocalService getCounterLocalService() {
        return counterLocalService;
    }

    /**
     * Sets the counter local service.
     *
     * @param counterLocalService the counter local service
     */
    public void setCounterLocalService(
        com.liferay.counter.service.CounterLocalService counterLocalService) {
        this.counterLocalService = counterLocalService;
    }

    /**
     * Returns the resource local service.
     *
     * @return the resource local service
     */
    public com.liferay.portal.service.ResourceLocalService getResourceLocalService() {
        return resourceLocalService;
    }

    /**
     * Sets the resource local service.
     *
     * @param resourceLocalService the resource local service
     */
    public void setResourceLocalService(
        com.liferay.portal.service.ResourceLocalService resourceLocalService) {
        this.resourceLocalService = resourceLocalService;
    }

    /**
     * Returns the user local service.
     *
     * @return the user local service
     */
    public com.liferay.portal.service.UserLocalService getUserLocalService() {
        return userLocalService;
    }

    /**
     * Sets the user local service.
     *
     * @param userLocalService the user local service
     */
    public void setUserLocalService(
        com.liferay.portal.service.UserLocalService userLocalService) {
        this.userLocalService = userLocalService;
    }

    /**
     * Returns the user remote service.
     *
     * @return the user remote service
     */
    public com.liferay.portal.service.UserService getUserService() {
        return userService;
    }

    /**
     * Sets the user remote service.
     *
     * @param userService the user remote service
     */
    public void setUserService(
        com.liferay.portal.service.UserService userService) {
        this.userService = userService;
    }

    /**
     * Returns the user persistence.
     *
     * @return the user persistence
     */
    public UserPersistence getUserPersistence() {
        return userPersistence;
    }

    /**
     * Sets the user persistence.
     *
     * @param userPersistence the user persistence
     */
    public void setUserPersistence(UserPersistence userPersistence) {
        this.userPersistence = userPersistence;
    }

    public void afterPropertiesSet() {
        Class<?> clazz = getClass();

        _classLoader = clazz.getClassLoader();

        PersistedModelLocalServiceRegistryUtil.register("com.knowarth.portlets.themepersonalizer.model.AvailablePersonalizedTheme",
            availablePersonalizedThemeLocalService);
    }

    public void destroy() {
        PersistedModelLocalServiceRegistryUtil.unregister(
            "com.knowarth.portlets.themepersonalizer.model.AvailablePersonalizedTheme");
    }

    /**
     * Returns the Spring bean ID for this bean.
     *
     * @return the Spring bean ID for this bean
     */
    @Override
    public String getBeanIdentifier() {
        return _beanIdentifier;
    }

    /**
     * Sets the Spring bean ID for this bean.
     *
     * @param beanIdentifier the Spring bean ID for this bean
     */
    @Override
    public void setBeanIdentifier(String beanIdentifier) {
        _beanIdentifier = beanIdentifier;
    }

    @Override
    public Object invokeMethod(String name, String[] parameterTypes,
        Object[] arguments) throws Throwable {
        Thread currentThread = Thread.currentThread();

        ClassLoader contextClassLoader = currentThread.getContextClassLoader();

        if (contextClassLoader != _classLoader) {
            currentThread.setContextClassLoader(_classLoader);
        }

        try {
            return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
        } finally {
            if (contextClassLoader != _classLoader) {
                currentThread.setContextClassLoader(contextClassLoader);
            }
        }
    }

    protected Class<?> getModelClass() {
        return AvailablePersonalizedTheme.class;
    }

    protected String getModelClassName() {
        return AvailablePersonalizedTheme.class.getName();
    }

    /**
     * Performs an SQL query.
     *
     * @param sql the sql query
     */
    protected void runSQL(String sql) throws SystemException {
        try {
            DataSource dataSource = availablePersonalizedThemePersistence.getDataSource();

            SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
                    sql, new int[0]);

            sqlUpdate.update();
        } catch (Exception e) {
            throw new SystemException(e);
        }
    }
}
